{#
    Renders datagrid widget

    columns = ['id' => 'Id', 'username' => 'User Name', 'email' => 'Email', 'fullName' => 'Full Name'];
    actions[] = [
        'label' => 'Edit',
        'router' => 'oro_bugtracker_customer_edit',
        'router_parameters' => [['collection_key' => 'id', 'router_key' => 'projectid', 'router_value' => 5]],
    ];
#}
{% macro renderGrid(collection, columns,  actions = '', properties = '') %}
    <div class="grid-container">
        <table class="table grid">
            <thead {% if properties is iterable %}
                    class="{{ properties.header_class }} {% endif %}">
            <tr>
                {% for key,value in columns %}
                    <th> {{ value }} </th>
                {% endfor %}
                {% if actions is iterable %}
                    <th>{{ 'Actions'|trans }}</th>
                {% endif %}
            </tr>
            </thead>
            <tbody>
            {% for item in collection %}
                <tr>
                    {% for key,value in columns %}
                        <td class="string-cell sortable renderable">
                            {% if item[key] is defined %}
                                {{ item[key] }}
                            {% else %}
                                {{ item.getData(key) }}
                            {% endif %}
                        </td>
                    {% endfor %}
                    {% if actions is iterable %}
                        <td class="string-cell sortable renderable">
                            <span class="item-actions">
                                {% for action in actions %}
                                    {% set router_parameters = {} %}
                                    {% if action.router_parameters is defined %}
                                        {% for parameter in action.router_parameters %}
                                            {% if parameter.router_value is defined %}
                                                {% set router_value = parameter.router_value %}
                                            {% else %}
                                                {% if item[parameter.collection_key] is defined %}
                                                    {% set router_value = item[parameter.collection_key] %}
                                                {% else %}
                                                    {% set router_value = item.getData(parameter.collection_key) %}
                                                {% endif %}
                                            {% endif %}
                                            {% set router_parameters =
                                            router_parameters|merge({ (parameter.router_key) : router_value}) %}
                                        {% endfor %}
                                    {% endif %}
                                    <a href="{{ url(action.router, router_parameters) }}" class="btn btn-sm btn-default">
                                            {{ action.label }}
                                    </a>
                                {% endfor %}
                            </span>
                        </td>
                    {% endif %}
                </tr>
            {% endfor %}
            </tbody>
        </table>
    </div>
{% endmacro %}

{#
    Renders paginator widget

    parameters:
        listRouteName: full name to the required router
        maxPages: quantity pages
        paginator_var: name of paginator var
#}
{% macro renderPaginator(listRouteName, maxPages, paginator_var) %}
    {% if maxPages > 1 %}
        {% set queryParams = (app.request.attributes.get('_route_params'))|merge(app.request.query.all) %}
        {% set thisPage = app.request.get(paginator_var) %}
        {% set thisPage = thisPage ? thisPage : 1 %}
        <div class="pagination">
            {# `«` arrow  #}
            <a {{ thisPage == 1 ? 'class="disabled"' }}
                    {% set prev_page_val =  thisPage-1 < 1 ? 1 : thisPage-1 %}
                    {% set preve_page_param = queryParams|merge({(paginator_var): prev_page_val}) %}
                    href="{{ path(listRouteName, preve_page_param) }}">«</a>

            {# Render each page number #}
            {% for i in 1..maxPages %}
                {% set list_page_param = queryParams|merge({(paginator_var): i}) %}
                <a {{ thisPage == i ? 'class="active"' }} href="{{ path(listRouteName, list_page_param) }}">{{ i }}</a>
            {% endfor %}

            {# `»` arrow #}
            <a {{ thisPage == maxPages ? 'class="disabled"' }}
                    {% set next_page_val =  thisPage+1 <= maxPages ? thisPage+1 : thisPage %}
                    {% set next_page_param = queryParams|merge({(paginator_var): next_page_val}) %}
                    href="{{ path(listRouteName, next_page_param) }}">»</a>
        </div>
    {% endif %}
{% endmacro %}
