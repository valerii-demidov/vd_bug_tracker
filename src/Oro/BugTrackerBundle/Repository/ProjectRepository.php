<?php

namespace Oro\BugTrackerBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Oro\BugTrackerBundle\Entity\Customer;
use Oro\BugTrackerBundle\Repository\Paginator\PageBuilder;
use Oro\BugTrackerBundle\Repository\Paginator\PaginatorInterface;
use Oro\BugTrackerBundle\Entity\Activity;
use Doctrine\ORM\QueryBuilder;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends EntityRepository implements PaginatorInterface
{
    use PageBuilder;

    /**
     * @param $method
     * @param array $attributes
     * @return bool
     */
    public function getQbByCustomCondition($method, array $attributes)
    {
        $qb = false;
        switch ($method) {
            case 'project_activities';
                $activityRepository = $this->getRepository(Activity::class);
                list($project) = $attributes;
                $qb = $activityRepository->getActivityProjectCollection(
                    $project
                );
            break;
        }

        return $qb;
    }

    /**
     * @param array $objectCollection
     * @param array $fields
     *
     * @return array
     */
    public function convertCollectionToAssoc($objectCollection, $fields)
    {
        $result = [];
        $inc = 0;
        foreach ($objectCollection as $object) {
            foreach ($fields as $field) {
                $result[$inc][$field] = '';
                if ((is_object($object))) {
                    $getFieldNameFunction = 'get'.ucfirst($field);
                    if (method_exists($object, $getFieldNameFunction)) {
                        $result[$inc][$field] = $object->$getFieldNameFunction();
                    }
                } elseif (is_array($object)) {
                    $result[$inc][$field] = $object[$field];
                }
            }
            $inc++;
        }

        return $result;
    }

    public function getProjectMembersListBySlug($slug)
    {
        $em = $this->getEntityManager();
        $customerRepository = $em->getRepository(Customer::class);
        if ($slug) {
            $conditionCollection = ['username' => ['like' => $slug.'%']];
            $findResult = $customerRepository->findByCondition($conditionCollection);
            $findResult = (is_array($findResult)) ? $findResult : [$findResult];

            $memberListAssoc = $customerRepository->convertCollectionToAssoc($findResult, ['username']);
            return (empty($memberListAssoc)) ? [] : array_column($memberListAssoc, 'username');
        }

        return false;
    }
}
